{"version":3,"sources":["components/QuoteBox.js","App.js","serviceWorker.js","index.js"],"names":["QuoteBox","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","url","urlText","quoteText","quoteAuthor","text","replace","react_default","a","createElement","id","onClick","getQuote","href","Component","App","quoteCat","getRandomQuote","bind","assertThisInitialized","_this2","fetch","then","res","json","result","setState","isLoaded","quote","author","cat","error","className","components_QuoteBox","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"qPAiCeA,qBA7Bb,SAAAA,EAAYC,GAAO,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAL,IACjBE,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAH,GAAAQ,KAAAH,KAAMJ,KACDQ,MAAQ,CACXC,IACE,4DACAR,EAAKS,QAAQT,EAAKD,MAAMW,WACxB,gBACAV,EAAKS,QAAQT,EAAKD,MAAMY,cAPXX,uEAUXY,GACN,OAAOA,EAAKC,QAAQ,MAAO,wCAG3B,OACEC,EAAAC,EAAAC,cAAA,OAAKC,GAAG,aACNH,EAAAC,EAAAC,cAAA,OAAKC,GAAG,QAAQd,KAAKJ,MAAMW,WAC3BI,EAAAC,EAAAC,cAAA,OAAKC,GAAG,UAAUd,KAAKJ,MAAMY,aAC7BG,EAAAC,EAAAC,cAAA,UAAQC,GAAG,YAAYC,QAASf,KAAKJ,MAAMoB,UAA3C,iBAGAL,EAAAC,EAAAC,cAAA,KAAGI,KAAMjB,KAAKI,MAAMC,IAAKS,GAAG,eAA5B,iBAtBeI,cCoDRC,qBAlDb,SAAAA,EAAYvB,GAAO,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAmB,IACjBtB,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAqB,GAAAhB,KAAAH,KAAMJ,KACDQ,MAAQ,CACXG,UAAW,GACXC,YAAa,GACbY,SAAU,QAGZvB,EAAKwB,eAAiBxB,EAAKwB,eAAeC,KAApBxB,OAAAyB,EAAA,EAAAzB,QAAAyB,EAAA,EAAAzB,CAAAD,KARLA,gFAUF,IAAA2B,EAAAxB,KACfyB,MAAM,2CACHC,KAAK,SAACC,GAAD,OAASA,EAAIC,SAClBF,KACC,SAACG,GACCL,EAAKM,SAAS,CACZC,UAAU,EACVxB,UAAWsB,EAAOG,MAClBxB,YAAaqB,EAAOI,OACpBb,SAAUS,EAAOK,OAGrB,SAACC,GACCX,EAAKM,SAAS,CACZC,UAAU,EACVI,wDAMRnC,KAAKqB,kDAGL,OACEV,EAAAC,EAAAC,cAAA,OAAKuB,UAAU,OACbzB,EAAAC,EAAAC,cAAA,UAAQuB,UAAU,cAChBzB,EAAAC,EAAAC,cAAA,6BAGFF,EAAAC,EAAAC,cAACwB,EAAD,CACE9B,UAAWP,KAAKI,MAAMG,UACtBC,YAAaR,KAAKI,MAAMI,YACxBQ,SAAUhB,KAAKqB,yBA5CPH,cCQEoB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOjC,EAAAC,EAAAC,cAACgC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMxB,KAAK,SAAAyB,GACjCA,EAAaC","file":"static/js/main.5d9859fe.chunk.js","sourcesContent":["import React, {Component} from \"react\";\r\nimport \"../css/QuoteBox.css\";\r\n\r\nclass QuoteBox extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      url:\r\n        \"https://twitter.com/intent/tweet?hashtags=quotes&text=%22\" +\r\n        this.urlText(this.props.quoteText) +\r\n        \"%22%20%20-%20\" +\r\n        this.urlText(this.props.quoteAuthor)\r\n    };\r\n  }\r\n  urlText(text) {\r\n    return text.replace(/\\s/g, \"%20\");\r\n  }\r\n  render() {\r\n    return (\r\n      <div id=\"quote-box\">\r\n        <div id=\"text\">{this.props.quoteText}</div>\r\n        <div id=\"author\">{this.props.quoteAuthor}</div>\r\n        <button id=\"new-quote\" onClick={this.props.getQuote}>\r\n          Get new Quote\r\n        </button>\r\n        <a href={this.state.url} id=\"tweet-quote\">\r\n          tweet\r\n        </a>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default QuoteBox;\r\n","import React, {Component} from \"react\";\nimport QuoteBox from \"./components/QuoteBox\";\nimport \"./css/App.css\";\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      quoteText: \"\",\n      quoteAuthor: \"\",\n      quoteCat: \"none\"\n    };\n\n    this.getRandomQuote = this.getRandomQuote.bind(this);\n  }\n  getRandomQuote() {\n    fetch(\"https://talaikis.com/api/quotes/random/\")\n      .then((res) => res.json())\n      .then(\n        (result) => {\n          this.setState({\n            isLoaded: true,\n            quoteText: result.quote,\n            quoteAuthor: result.author,\n            quoteCat: result.cat\n          });\n        },\n        (error) => {\n          this.setState({\n            isLoaded: true,\n            error\n          });\n        }\n      );\n  }\n  componentDidMount() {\n    this.getRandomQuote();\n  }\n  render() {\n    return (\n      <div className=\"App\">\n        <header className=\"App-header\">\n          <h1>Random Quotes!</h1>\n        </header>\n\n        <QuoteBox\n          quoteText={this.state.quoteText}\n          quoteAuthor={this.state.quoteAuthor}\n          getQuote={this.getRandomQuote}\n        />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./css/index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}